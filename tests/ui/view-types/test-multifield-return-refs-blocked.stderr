error: view-typed functions cannot return references
  --> $DIR/test-multifield-return-refs-blocked.rs:33:20
   |
LL |     fn use_x_and_y(&{mut x, mut y} mut self) -> &mut i32 {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: returning references from view-typed methods can cause soundness issues
   = note: this restriction may be lifted in a future version with proper region inference integration
   = help: consider returning an owned value or restructuring the code

error: view-typed functions cannot return references
  --> $DIR/test-multifield-return-refs-blocked.rs:40:20
   |
LL |     fn use_z_and_y(&{mut z, mut y} mut self) -> &mut i32 {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: returning references from view-typed methods can cause soundness issues
   = note: this restriction may be lifted in a future version with proper region inference integration
   = help: consider returning an owned value or restructuring the code

error: view-typed functions cannot return references
  --> $DIR/test-multifield-return-refs-blocked.rs:135:20
   |
LL |     fn accessor_xy(&{mut field_x, mut field_y} mut self) -> &mut i32 {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: returning references from view-typed methods can cause soundness issues
   = note: this restriction may be lifted in a future version with proper region inference integration
   = help: consider returning an owned value or restructuring the code

error: view-typed functions cannot return references
  --> $DIR/test-multifield-return-refs-blocked.rs:140:20
   |
LL |     fn accessor_yz(&{mut field_y, mut field_z} mut self) -> &mut i32 {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: returning references from view-typed methods can cause soundness issues
   = note: this restriction may be lifted in a future version with proper region inference integration
   = help: consider returning an owned value or restructuring the code

error[E0499]: cannot borrow `self.setting_b` as mutable more than once at a time
  --> $DIR/test-multifield-return-refs-blocked.rs:82:9
   |
LL |         let b_ref = &mut self.setting_b;
   |                     ------------------- first mutable borrow occurs here
...
LL |         self.modify_a_and_b();
   |         ^^^^ second mutable borrow occurs here
LL |
LL |         *b_ref = true;
   |         ------------- first borrow later used here

error[E0502]: cannot borrow `self.cache` as mutable because it is also borrowed as immutable
  --> $DIR/test-multifield-return-refs-blocked.rs:116:9
   |
LL |         let _cache_ref = &self.cache;
   |                          ----------- immutable borrow occurs here
...
LL |         self.update_cache_and_data();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here
...
LL |         println!("Cache: {}", _cache_ref);
   |                               ---------- immutable borrow later used here

error: aborting due to 6 previous errors

Some errors have detailed explanations: E0499, E0502.
For more information about an error, try `rustc --explain E0499`.
